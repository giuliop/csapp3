	.pos 0			# Execution begins at address 0
	irmovq stack, %rsp	# Set up stack pointer
	call main
	halt

# Sample linked list for testing
	.align 8
ele1:
	.quad 0x00a
	.quad ele2
ele2:
	.quad 0x0b0
	.quad ele3
ele3:
	.quad 0xc00
	.quad 0

main:
	irmovq ele1,%rdi	# set arg for sum_list to ele1
	call sum_list
	ret	

# long sum_list(list_ptr ls)
# sum the elements of a linked list
# ls in %rdi
sum_list:
	irmovq $0,%rax		# initialize result to 0
loop:
	andq %rdi,%rdi		# set CC to zero if ls==0
	je end			# if ls==0 end loop
	mrmovq (%rdi),%r8	# load ls->val in %r8
	mrmovq 8(%rdi),%rdi	# load ls->next in %rdi
	addq %r8,%rax		# accumulate sum in %rax
	jmp loop		# iterate loop
end:
	ret


# Stack starts here and grows to lower addresses
	.pos 0x400
stack:
	


