	.pos 0			# Execution begins at address 0
	irmovq stack, %rsp	# Set up stack pointer
	call main
	halt

# Sample linked list for testing
	.align 8
ele1:
	.quad 0x00a
	.quad ele2
ele2:
	.quad 0x0b0
	.quad ele3
ele3:
	.quad 0xc00
	.quad 0

main:
	irmovq ele1,%rdi	# set arg for sum_list to ele1
	call rsum_list
	ret	

# long rsum_list(list_ptr ls)
# sum the elements of a linked list using recursion
# ls in %rdi
rsum_list:
	andq %rdi,%rdi		# set CC to zero if ls==0
	je end			# if ls==0 goto end
	mrmovq (%rdi),%r8	# load ls->val in %r8
	pushq %r8		# save %r8 on the stack
	mrmovq 8(%rdi),%rdi	# load ls->next in %rdi
	call rsum_list		# recursive call
	popq %r8		# load back in %r8 the saved value
	addq %r8,%rax		# sum in %rax
	ret
end:
	irmovq $0,%rax		# set result to 0
	ret


# Stack starts here and grows to lower addresses
	.pos 0x400
stack:
	


