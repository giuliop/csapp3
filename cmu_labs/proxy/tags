!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
Accept	.proxy/csapp.c	/^int Accept(int s, struct sockaddr *addr, socklen_t *addrlen) $/;"	f
Accept	csapp.c	/^int Accept(int s, struct sockaddr *addr, socklen_t *addrlen) $/;"	f
Accept	tiny/csapp.c	/^int Accept(int s, struct sockaddr *addr, socklen_t *addrlen) $/;"	f
Alarm	.proxy/csapp.c	/^unsigned int Alarm(unsigned int seconds) {$/;"	f
Alarm	csapp.c	/^unsigned int Alarm(unsigned int seconds) {$/;"	f
Alarm	tiny/csapp.c	/^unsigned int Alarm(unsigned int seconds) {$/;"	f
Bind	.proxy/csapp.c	/^void Bind(int sockfd, struct sockaddr *my_addr, int addrlen) $/;"	f
Bind	csapp.c	/^void Bind(int sockfd, struct sockaddr *my_addr, int addrlen) $/;"	f
Bind	tiny/csapp.c	/^void Bind(int sockfd, struct sockaddr *my_addr, int addrlen) $/;"	f
CC	tiny/Makefile	/^CC = gcc$/;"	m
CC	tiny/cgi-bin/Makefile	/^CC = gcc$/;"	m
CFLAGS	tiny/Makefile	/^CFLAGS = -O2 -Wall -I .$/;"	m
CFLAGS	tiny/cgi-bin/Makefile	/^CFLAGS = -O2 -Wall -I ..$/;"	m
Calloc	.proxy/csapp.c	/^void *Calloc(size_t nmemb, size_t size) $/;"	f
Calloc	csapp.c	/^void *Calloc(size_t nmemb, size_t size) $/;"	f
Calloc	tiny/csapp.c	/^void *Calloc(size_t nmemb, size_t size) $/;"	f
Close	.proxy/csapp.c	/^void Close(int fd) $/;"	f
Close	csapp.c	/^void Close(int fd) $/;"	f
Close	tiny/csapp.c	/^void Close(int fd) $/;"	f
Closedir	.proxy/csapp.c	/^int Closedir(DIR *dirp) $/;"	f
Closedir	csapp.c	/^int Closedir(DIR *dirp) $/;"	f
Closedir	tiny/csapp.c	/^int Closedir(DIR *dirp) $/;"	f
Connect	.proxy/csapp.c	/^void Connect(int sockfd, struct sockaddr *serv_addr, int addrlen) $/;"	f
Connect	csapp.c	/^void Connect(int sockfd, struct sockaddr *serv_addr, int addrlen) $/;"	f
Connect	tiny/csapp.c	/^void Connect(int sockfd, struct sockaddr *serv_addr, int addrlen) $/;"	f
DEF_MODE	csapp.h	34;"	d
DEF_MODE	tiny/csapp.h	34;"	d
DEF_UMASK	csapp.h	35;"	d
DEF_UMASK	tiny/csapp.h	35;"	d
Dup2	.proxy/csapp.c	/^int Dup2(int fd1, int fd2) $/;"	f
Dup2	csapp.c	/^int Dup2(int fd1, int fd2) $/;"	f
Dup2	tiny/csapp.c	/^int Dup2(int fd1, int fd2) $/;"	f
Execve	.proxy/csapp.c	/^void Execve(const char *filename, char *const argv[], char *const envp[]) $/;"	f
Execve	csapp.c	/^void Execve(const char *filename, char *const argv[], char *const envp[]) $/;"	f
Execve	tiny/csapp.c	/^void Execve(const char *filename, char *const argv[], char *const envp[]) $/;"	f
Fclose	.proxy/csapp.c	/^void Fclose(FILE *fp) $/;"	f
Fclose	csapp.c	/^void Fclose(FILE *fp) $/;"	f
Fclose	tiny/csapp.c	/^void Fclose(FILE *fp) $/;"	f
Fdopen	.proxy/csapp.c	/^FILE *Fdopen(int fd, const char *type) $/;"	f
Fdopen	csapp.c	/^FILE *Fdopen(int fd, const char *type) $/;"	f
Fdopen	tiny/csapp.c	/^FILE *Fdopen(int fd, const char *type) $/;"	f
Fgets	.proxy/csapp.c	/^char *Fgets(char *ptr, int n, FILE *stream) $/;"	f
Fgets	csapp.c	/^char *Fgets(char *ptr, int n, FILE *stream) $/;"	f
Fgets	tiny/csapp.c	/^char *Fgets(char *ptr, int n, FILE *stream) $/;"	f
Fopen	.proxy/csapp.c	/^FILE *Fopen(const char *filename, const char *mode) $/;"	f
Fopen	csapp.c	/^FILE *Fopen(const char *filename, const char *mode) $/;"	f
Fopen	tiny/csapp.c	/^FILE *Fopen(const char *filename, const char *mode) $/;"	f
Fork	.proxy/csapp.c	/^pid_t Fork(void) $/;"	f
Fork	csapp.c	/^pid_t Fork(void) $/;"	f
Fork	tiny/csapp.c	/^pid_t Fork(void) $/;"	f
Fputs	.proxy/csapp.c	/^void Fputs(const char *ptr, FILE *stream) $/;"	f
Fputs	csapp.c	/^void Fputs(const char *ptr, FILE *stream) $/;"	f
Fputs	tiny/csapp.c	/^void Fputs(const char *ptr, FILE *stream) $/;"	f
Fread	.proxy/csapp.c	/^size_t Fread(void *ptr, size_t size, size_t nmemb, FILE *stream) $/;"	f
Fread	csapp.c	/^size_t Fread(void *ptr, size_t size, size_t nmemb, FILE *stream) $/;"	f
Fread	tiny/csapp.c	/^size_t Fread(void *ptr, size_t size, size_t nmemb, FILE *stream) $/;"	f
Free	.proxy/csapp.c	/^void Free(void *ptr) $/;"	f
Free	csapp.c	/^void Free(void *ptr) $/;"	f
Free	tiny/csapp.c	/^void Free(void *ptr) $/;"	f
Freeaddrinfo	.proxy/csapp.c	/^void Freeaddrinfo(struct addrinfo *res)$/;"	f
Freeaddrinfo	csapp.c	/^void Freeaddrinfo(struct addrinfo *res)$/;"	f
Freeaddrinfo	tiny/csapp.c	/^void Freeaddrinfo(struct addrinfo *res)$/;"	f
Fstat	.proxy/csapp.c	/^void Fstat(int fd, struct stat *buf) $/;"	f
Fstat	csapp.c	/^void Fstat(int fd, struct stat *buf) $/;"	f
Fstat	tiny/csapp.c	/^void Fstat(int fd, struct stat *buf) $/;"	f
Fwrite	.proxy/csapp.c	/^void Fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream) $/;"	f
Fwrite	csapp.c	/^void Fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream) $/;"	f
Fwrite	tiny/csapp.c	/^void Fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream) $/;"	f
Getaddrinfo	.proxy/csapp.c	/^void Getaddrinfo(const char *node, const char *service, $/;"	f
Getaddrinfo	csapp.c	/^void Getaddrinfo(const char *node, const char *service, $/;"	f
Getaddrinfo	tiny/csapp.c	/^void Getaddrinfo(const char *node, const char *service, $/;"	f
Gethostbyaddr	.proxy/csapp.c	/^struct hostent *Gethostbyaddr(const char *addr, int len, int type) $/;"	f
Gethostbyaddr	csapp.c	/^struct hostent *Gethostbyaddr(const char *addr, int len, int type) $/;"	f
Gethostbyaddr	tiny/csapp.c	/^struct hostent *Gethostbyaddr(const char *addr, int len, int type) $/;"	f
Gethostbyname	.proxy/csapp.c	/^struct hostent *Gethostbyname(const char *name) $/;"	f
Gethostbyname	csapp.c	/^struct hostent *Gethostbyname(const char *name) $/;"	f
Gethostbyname	tiny/csapp.c	/^struct hostent *Gethostbyname(const char *name) $/;"	f
Getnameinfo	.proxy/csapp.c	/^void Getnameinfo(const struct sockaddr *sa, socklen_t salen, char *host, $/;"	f
Getnameinfo	csapp.c	/^void Getnameinfo(const struct sockaddr *sa, socklen_t salen, char *host, $/;"	f
Getnameinfo	tiny/csapp.c	/^void Getnameinfo(const struct sockaddr *sa, socklen_t salen, char *host, $/;"	f
Getpgrp	.proxy/csapp.c	/^pid_t Getpgrp(void) {$/;"	f
Getpgrp	csapp.c	/^pid_t Getpgrp(void) {$/;"	f
Getpgrp	tiny/csapp.c	/^pid_t Getpgrp(void) {$/;"	f
Inet_ntop	.proxy/csapp.c	/^void Inet_ntop(int af, const void *src, char *dst, socklen_t size)$/;"	f
Inet_ntop	csapp.c	/^void Inet_ntop(int af, const void *src, char *dst, socklen_t size)$/;"	f
Inet_ntop	tiny/csapp.c	/^void Inet_ntop(int af, const void *src, char *dst, socklen_t size)$/;"	f
Inet_pton	.proxy/csapp.c	/^void Inet_pton(int af, const char *src, void *dst) $/;"	f
Inet_pton	csapp.c	/^void Inet_pton(int af, const char *src, void *dst) $/;"	f
Inet_pton	tiny/csapp.c	/^void Inet_pton(int af, const char *src, void *dst) $/;"	f
Kill	.proxy/csapp.c	/^void Kill(pid_t pid, int signum) $/;"	f
Kill	csapp.c	/^void Kill(pid_t pid, int signum) $/;"	f
Kill	tiny/csapp.c	/^void Kill(pid_t pid, int signum) $/;"	f
LIB	tiny/Makefile	/^LIB = -lpthread$/;"	m
LISTENQ	csapp.h	61;"	d
LISTENQ	tiny/csapp.h	61;"	d
Listen	.proxy/csapp.c	/^void Listen(int s, int backlog) $/;"	f
Listen	csapp.c	/^void Listen(int s, int backlog) $/;"	f
Listen	tiny/csapp.c	/^void Listen(int s, int backlog) $/;"	f
Lseek	.proxy/csapp.c	/^off_t Lseek(int fildes, off_t offset, int whence) $/;"	f
Lseek	csapp.c	/^off_t Lseek(int fildes, off_t offset, int whence) $/;"	f
Lseek	tiny/csapp.c	/^off_t Lseek(int fildes, off_t offset, int whence) $/;"	f
MAXBUF	csapp.h	60;"	d
MAXBUF	tiny/csapp.h	60;"	d
MAXLINE	csapp.h	59;"	d
MAXLINE	tiny/csapp.h	59;"	d
MAX_CACHE_SIZE	proxy.c	6;"	d	file:
MAX_OBJECT_SIZE	proxy.c	7;"	d	file:
Malloc	.proxy/csapp.c	/^void *Malloc(size_t size) $/;"	f
Malloc	csapp.c	/^void *Malloc(size_t size) $/;"	f
Malloc	tiny/csapp.c	/^void *Malloc(size_t size) $/;"	f
Mmap	.proxy/csapp.c	/^void *Mmap(void *addr, size_t len, int prot, int flags, int fd, off_t offset) $/;"	f
Mmap	csapp.c	/^void *Mmap(void *addr, size_t len, int prot, int flags, int fd, off_t offset) $/;"	f
Mmap	tiny/csapp.c	/^void *Mmap(void *addr, size_t len, int prot, int flags, int fd, off_t offset) $/;"	f
Munmap	.proxy/csapp.c	/^void Munmap(void *start, size_t length) $/;"	f
Munmap	csapp.c	/^void Munmap(void *start, size_t length) $/;"	f
Munmap	tiny/csapp.c	/^void Munmap(void *start, size_t length) $/;"	f
Open	.proxy/csapp.c	/^int Open(const char *pathname, int flags, mode_t mode) $/;"	f
Open	csapp.c	/^int Open(const char *pathname, int flags, mode_t mode) $/;"	f
Open	tiny/csapp.c	/^int Open(const char *pathname, int flags, mode_t mode) $/;"	f
Open_clientfd	.proxy/csapp.c	/^int Open_clientfd(char *hostname, char *port) $/;"	f
Open_clientfd	csapp.c	/^int Open_clientfd(char *hostname, char *port) $/;"	f
Open_clientfd	tiny/csapp.c	/^int Open_clientfd(char *hostname, char *port) $/;"	f
Open_listenfd	.proxy/csapp.c	/^int Open_listenfd(char *port) $/;"	f
Open_listenfd	csapp.c	/^int Open_listenfd(char *port) $/;"	f
Open_listenfd	tiny/csapp.c	/^int Open_listenfd(char *port) $/;"	f
Opendir	.proxy/csapp.c	/^DIR *Opendir(const char *name) $/;"	f
Opendir	csapp.c	/^DIR *Opendir(const char *name) $/;"	f
Opendir	tiny/csapp.c	/^DIR *Opendir(const char *name) $/;"	f
P	.proxy/csapp.c	/^void P(sem_t *sem) $/;"	f
P	csapp.c	/^void P(sem_t *sem) $/;"	f
P	tiny/csapp.c	/^void P(sem_t *sem) $/;"	f
Pause	.proxy/csapp.c	/^void Pause() $/;"	f
Pause	csapp.c	/^void Pause() $/;"	f
Pause	tiny/csapp.c	/^void Pause() $/;"	f
Pthread_cancel	.proxy/csapp.c	/^void Pthread_cancel(pthread_t tid) {$/;"	f
Pthread_cancel	csapp.c	/^void Pthread_cancel(pthread_t tid) {$/;"	f
Pthread_cancel	tiny/csapp.c	/^void Pthread_cancel(pthread_t tid) {$/;"	f
Pthread_create	.proxy/csapp.c	/^void Pthread_create(pthread_t *tidp, pthread_attr_t *attrp, $/;"	f
Pthread_create	csapp.c	/^void Pthread_create(pthread_t *tidp, pthread_attr_t *attrp, $/;"	f
Pthread_create	tiny/csapp.c	/^void Pthread_create(pthread_t *tidp, pthread_attr_t *attrp, $/;"	f
Pthread_detach	.proxy/csapp.c	/^void Pthread_detach(pthread_t tid) {$/;"	f
Pthread_detach	csapp.c	/^void Pthread_detach(pthread_t tid) {$/;"	f
Pthread_detach	tiny/csapp.c	/^void Pthread_detach(pthread_t tid) {$/;"	f
Pthread_exit	.proxy/csapp.c	/^void Pthread_exit(void *retval) {$/;"	f
Pthread_exit	csapp.c	/^void Pthread_exit(void *retval) {$/;"	f
Pthread_exit	tiny/csapp.c	/^void Pthread_exit(void *retval) {$/;"	f
Pthread_join	.proxy/csapp.c	/^void Pthread_join(pthread_t tid, void **thread_return) {$/;"	f
Pthread_join	csapp.c	/^void Pthread_join(pthread_t tid, void **thread_return) {$/;"	f
Pthread_join	tiny/csapp.c	/^void Pthread_join(pthread_t tid, void **thread_return) {$/;"	f
Pthread_once	.proxy/csapp.c	/^void Pthread_once(pthread_once_t *once_control, void (*init_function)()) {$/;"	f
Pthread_once	csapp.c	/^void Pthread_once(pthread_once_t *once_control, void (*init_function)()) {$/;"	f
Pthread_once	tiny/csapp.c	/^void Pthread_once(pthread_once_t *once_control, void (*init_function)()) {$/;"	f
Pthread_self	.proxy/csapp.c	/^pthread_t Pthread_self(void) {$/;"	f
Pthread_self	csapp.c	/^pthread_t Pthread_self(void) {$/;"	f
Pthread_self	tiny/csapp.c	/^pthread_t Pthread_self(void) {$/;"	f
RIO_BUFSIZE	csapp.h	45;"	d
RIO_BUFSIZE	tiny/csapp.h	45;"	d
Read	.proxy/csapp.c	/^ssize_t Read(int fd, void *buf, size_t count) $/;"	f
Read	csapp.c	/^ssize_t Read(int fd, void *buf, size_t count) $/;"	f
Read	tiny/csapp.c	/^ssize_t Read(int fd, void *buf, size_t count) $/;"	f
Readdir	.proxy/csapp.c	/^struct dirent *Readdir(DIR *dirp)$/;"	f
Readdir	csapp.c	/^struct dirent *Readdir(DIR *dirp)$/;"	f
Readdir	tiny/csapp.c	/^struct dirent *Readdir(DIR *dirp)$/;"	f
Realloc	.proxy/csapp.c	/^void *Realloc(void *ptr, size_t size) $/;"	f
Realloc	csapp.c	/^void *Realloc(void *ptr, size_t size) $/;"	f
Realloc	tiny/csapp.c	/^void *Realloc(void *ptr, size_t size) $/;"	f
Rio_readinitb	.proxy/csapp.c	/^void Rio_readinitb(rio_t *rp, int fd)$/;"	f
Rio_readinitb	csapp.c	/^void Rio_readinitb(rio_t *rp, int fd)$/;"	f
Rio_readinitb	tiny/csapp.c	/^void Rio_readinitb(rio_t *rp, int fd)$/;"	f
Rio_readlineb	.proxy/csapp.c	/^ssize_t Rio_readlineb(rio_t *rp, void *usrbuf, size_t maxlen) $/;"	f
Rio_readlineb	csapp.c	/^ssize_t Rio_readlineb(rio_t *rp, void *usrbuf, size_t maxlen) $/;"	f
Rio_readlineb	tiny/csapp.c	/^ssize_t Rio_readlineb(rio_t *rp, void *usrbuf, size_t maxlen) $/;"	f
Rio_readn	.proxy/csapp.c	/^ssize_t Rio_readn(int fd, void *ptr, size_t nbytes) $/;"	f
Rio_readn	csapp.c	/^ssize_t Rio_readn(int fd, void *ptr, size_t nbytes) $/;"	f
Rio_readn	tiny/csapp.c	/^ssize_t Rio_readn(int fd, void *ptr, size_t nbytes) $/;"	f
Rio_readnb	.proxy/csapp.c	/^ssize_t Rio_readnb(rio_t *rp, void *usrbuf, size_t n) $/;"	f
Rio_readnb	csapp.c	/^ssize_t Rio_readnb(rio_t *rp, void *usrbuf, size_t n) $/;"	f
Rio_readnb	tiny/csapp.c	/^ssize_t Rio_readnb(rio_t *rp, void *usrbuf, size_t n) $/;"	f
Rio_writen	.proxy/csapp.c	/^void Rio_writen(int fd, void *usrbuf, size_t n) $/;"	f
Rio_writen	csapp.c	/^void Rio_writen(int fd, void *usrbuf, size_t n) $/;"	f
Rio_writen	tiny/csapp.c	/^void Rio_writen(int fd, void *usrbuf, size_t n) $/;"	f
SA	csapp.h	/^typedef struct sockaddr SA;$/;"	t	typeref:struct:sockaddr
SA	tiny/csapp.h	/^typedef struct sockaddr SA;$/;"	t	typeref:struct:sockaddr
Select	.proxy/csapp.c	/^int Select(int  n, fd_set *readfds, fd_set *writefds,$/;"	f
Select	csapp.c	/^int Select(int  n, fd_set *readfds, fd_set *writefds,$/;"	f
Select	tiny/csapp.c	/^int Select(int  n, fd_set *readfds, fd_set *writefds,$/;"	f
Sem_init	.proxy/csapp.c	/^void Sem_init(sem_t *sem, int pshared, unsigned int value) $/;"	f
Sem_init	csapp.c	/^void Sem_init(sem_t *sem, int pshared, unsigned int value) $/;"	f
Sem_init	tiny/csapp.c	/^void Sem_init(sem_t *sem, int pshared, unsigned int value) $/;"	f
Setpgid	.proxy/csapp.c	/^void Setpgid(pid_t pid, pid_t pgid) {$/;"	f
Setpgid	csapp.c	/^void Setpgid(pid_t pid, pid_t pgid) {$/;"	f
Setpgid	tiny/csapp.c	/^void Setpgid(pid_t pid, pid_t pgid) {$/;"	f
Setsockopt	.proxy/csapp.c	/^void Setsockopt(int s, int level, int optname, const void *optval, int optlen) $/;"	f
Setsockopt	csapp.c	/^void Setsockopt(int s, int level, int optname, const void *optval, int optlen) $/;"	f
Setsockopt	tiny/csapp.c	/^void Setsockopt(int s, int level, int optname, const void *optval, int optlen) $/;"	f
Sigaddset	.proxy/csapp.c	/^void Sigaddset(sigset_t *set, int signum)$/;"	f
Sigaddset	csapp.c	/^void Sigaddset(sigset_t *set, int signum)$/;"	f
Sigaddset	tiny/csapp.c	/^void Sigaddset(sigset_t *set, int signum)$/;"	f
Sigdelset	.proxy/csapp.c	/^void Sigdelset(sigset_t *set, int signum)$/;"	f
Sigdelset	csapp.c	/^void Sigdelset(sigset_t *set, int signum)$/;"	f
Sigdelset	tiny/csapp.c	/^void Sigdelset(sigset_t *set, int signum)$/;"	f
Sigemptyset	.proxy/csapp.c	/^void Sigemptyset(sigset_t *set)$/;"	f
Sigemptyset	csapp.c	/^void Sigemptyset(sigset_t *set)$/;"	f
Sigemptyset	tiny/csapp.c	/^void Sigemptyset(sigset_t *set)$/;"	f
Sigfillset	.proxy/csapp.c	/^void Sigfillset(sigset_t *set)$/;"	f
Sigfillset	csapp.c	/^void Sigfillset(sigset_t *set)$/;"	f
Sigfillset	tiny/csapp.c	/^void Sigfillset(sigset_t *set)$/;"	f
Sigismember	.proxy/csapp.c	/^int Sigismember(const sigset_t *set, int signum)$/;"	f
Sigismember	csapp.c	/^int Sigismember(const sigset_t *set, int signum)$/;"	f
Sigismember	tiny/csapp.c	/^int Sigismember(const sigset_t *set, int signum)$/;"	f
Signal	.proxy/csapp.c	/^handler_t *Signal(int signum, handler_t *handler) $/;"	f
Signal	csapp.c	/^handler_t *Signal(int signum, handler_t *handler) $/;"	f
Signal	tiny/csapp.c	/^handler_t *Signal(int signum, handler_t *handler) $/;"	f
Sigprocmask	.proxy/csapp.c	/^void Sigprocmask(int how, const sigset_t *set, sigset_t *oldset)$/;"	f
Sigprocmask	csapp.c	/^void Sigprocmask(int how, const sigset_t *set, sigset_t *oldset)$/;"	f
Sigprocmask	tiny/csapp.c	/^void Sigprocmask(int how, const sigset_t *set, sigset_t *oldset)$/;"	f
Sigsuspend	.proxy/csapp.c	/^int Sigsuspend(const sigset_t *set)$/;"	f
Sigsuspend	csapp.c	/^int Sigsuspend(const sigset_t *set)$/;"	f
Sigsuspend	tiny/csapp.c	/^int Sigsuspend(const sigset_t *set)$/;"	f
Sio_error	.proxy/csapp.c	/^void Sio_error(char s[])$/;"	f
Sio_error	csapp.c	/^void Sio_error(char s[])$/;"	f
Sio_error	tiny/csapp.c	/^void Sio_error(char s[])$/;"	f
Sio_putl	.proxy/csapp.c	/^ssize_t Sio_putl(long v)$/;"	f
Sio_putl	csapp.c	/^ssize_t Sio_putl(long v)$/;"	f
Sio_putl	tiny/csapp.c	/^ssize_t Sio_putl(long v)$/;"	f
Sio_puts	.proxy/csapp.c	/^ssize_t Sio_puts(char s[])$/;"	f
Sio_puts	csapp.c	/^ssize_t Sio_puts(char s[])$/;"	f
Sio_puts	tiny/csapp.c	/^ssize_t Sio_puts(char s[])$/;"	f
Sleep	.proxy/csapp.c	/^unsigned int Sleep(unsigned int secs) $/;"	f
Sleep	csapp.c	/^unsigned int Sleep(unsigned int secs) $/;"	f
Sleep	tiny/csapp.c	/^unsigned int Sleep(unsigned int secs) $/;"	f
Socket	.proxy/csapp.c	/^int Socket(int domain, int type, int protocol) $/;"	f
Socket	csapp.c	/^int Socket(int domain, int type, int protocol) $/;"	f
Socket	tiny/csapp.c	/^int Socket(int domain, int type, int protocol) $/;"	f
Stat	.proxy/csapp.c	/^void Stat(const char *filename, struct stat *buf) $/;"	f
Stat	csapp.c	/^void Stat(const char *filename, struct stat *buf) $/;"	f
Stat	tiny/csapp.c	/^void Stat(const char *filename, struct stat *buf) $/;"	f
V	.proxy/csapp.c	/^void V(sem_t *sem) $/;"	f
V	csapp.c	/^void V(sem_t *sem) $/;"	f
V	tiny/csapp.c	/^void V(sem_t *sem) $/;"	f
Wait	.proxy/csapp.c	/^pid_t Wait(int *status) $/;"	f
Wait	csapp.c	/^pid_t Wait(int *status) $/;"	f
Wait	tiny/csapp.c	/^pid_t Wait(int *status) $/;"	f
Waitpid	.proxy/csapp.c	/^pid_t Waitpid(pid_t pid, int *iptr, int options) $/;"	f
Waitpid	csapp.c	/^pid_t Waitpid(pid_t pid, int *iptr, int options) $/;"	f
Waitpid	tiny/csapp.c	/^pid_t Waitpid(pid_t pid, int *iptr, int options) $/;"	f
Write	.proxy/csapp.c	/^ssize_t Write(int fd, const void *buf, size_t count) $/;"	f
Write	csapp.c	/^ssize_t Write(int fd, const void *buf, size_t count) $/;"	f
Write	tiny/csapp.c	/^ssize_t Write(int fd, const void *buf, size_t count) $/;"	f
__CSAPP_H__	csapp.h	6;"	d
__CSAPP_H__	tiny/csapp.h	6;"	d
app_error	.proxy/csapp.c	/^void app_error(char *msg) \/* Application error *\/$/;"	f
app_error	csapp.c	/^void app_error(char *msg) \/* Application error *\/$/;"	f
app_error	tiny/csapp.c	/^void app_error(char *msg) \/* Application error *\/$/;"	f
clear_dirs	driver.sh	/^function clear_dirs {$/;"	f
clienterror	.proxy/tiny.c	/^void clienterror(int fd, char *cause, char *errnum, $/;"	f
clienterror	proxy.c	/^void clienterror(int fd, char *cause, char *errnum, $/;"	f
clienterror	tiny/tiny.c	/^void clienterror(int fd, char *cause, char *errnum, $/;"	f
connection	proxy.c	/^	char connection[MAXLINE];$/;"	m	struct:req_hdrs	file:
dns_error	.proxy/csapp.c	/^void dns_error(char *msg) \/* Obsolete gethostbyname error *\/$/;"	f
dns_error	csapp.c	/^void dns_error(char *msg) \/* Obsolete gethostbyname error *\/$/;"	f
dns_error	tiny/csapp.c	/^void dns_error(char *msg) \/* Obsolete gethostbyname error *\/$/;"	f
doit	.proxy/tiny.c	/^void doit(int fd) $/;"	f
doit	proxy.c	/^void doit(int fd) $/;"	f
doit	tiny/tiny.c	/^void doit(int fd) $/;"	f
download_noproxy	driver.sh	/^function download_noproxy {$/;"	f
download_proxy	driver.sh	/^function download_proxy {$/;"	f
free_port	driver.sh	/^function free_port {$/;"	f
gai_error	.proxy/csapp.c	/^void gai_error(int code, char *msg) \/* Getaddrinfo-style error *\/$/;"	f
gai_error	csapp.c	/^void gai_error(int code, char *msg) \/* Getaddrinfo-style error *\/$/;"	f
gai_error	tiny/csapp.c	/^void gai_error(int code, char *msg) \/* Getaddrinfo-style error *\/$/;"	f
get_filetype	.proxy/tiny.c	/^void get_filetype(char *filename, char *filetype) $/;"	f
get_filetype	tiny/tiny.c	/^void get_filetype(char *filename, char *filetype) $/;"	f
handler_t	csapp.h	/^typedef void handler_t(int);$/;"	t
handler_t	tiny/csapp.h	/^typedef void handler_t(int);$/;"	t
hdrs	proxy.c	/^	struct req_hdrs * hdrs;$/;"	m	struct:http10request	typeref:struct:http10request::req_hdrs	file:
host	proxy.c	/^	char host[MAXLINE];$/;"	m	struct:http10request	file:
host	proxy.c	/^	char host[MAXLINE];$/;"	m	struct:req_hdrs	file:
http10request	proxy.c	/^struct http10request {$/;"	s	file:
main	.proxy/tiny.c	/^int main(int argc, char **argv) $/;"	f
main	proxy.c	/^int main(int argc, char **argv) $/;"	f
main	tiny/cgi-bin/adder.c	/^int main(void) {$/;"	f
main	tiny/tiny.c	/^int main(int argc, char **argv) $/;"	f
method	proxy.c	/^	char method[MAXLINE];$/;"	m	struct:http10request	file:
open_clientfd	.proxy/csapp.c	/^int open_clientfd(char *hostname, char *port) {$/;"	f
open_clientfd	csapp.c	/^int open_clientfd(char *hostname, char *port) {$/;"	f
open_clientfd	tiny/csapp.c	/^int open_clientfd(char *hostname, char *port) {$/;"	f
open_listenfd	.proxy/csapp.c	/^int open_listenfd(char *port) $/;"	f
open_listenfd	csapp.c	/^int open_listenfd(char *port) $/;"	f
open_listenfd	tiny/csapp.c	/^int open_listenfd(char *port) $/;"	f
others	proxy.c	/^	char others[MAXLINE];$/;"	m	struct:req_hdrs	file:
parse_uri	.proxy/tiny.c	/^int parse_uri(char *uri, char *filename, char *cgiargs) $/;"	f
parse_uri	proxy.c	/^void parse_uri(char * uri, char * host, char * port, char * path)$/;"	f
parse_uri	tiny/tiny.c	/^int parse_uri(char *uri, char *filename, char *cgiargs) $/;"	f
path	proxy.c	/^	char path[MAXLINE];$/;"	m	struct:http10request	file:
port	proxy.c	/^	char port[MAXLINE];$/;"	m	struct:http10request	file:
posix_error	.proxy/csapp.c	/^void posix_error(int code, char *msg) \/* Posix-style error *\/$/;"	f
posix_error	csapp.c	/^void posix_error(int code, char *msg) \/* Posix-style error *\/$/;"	f
posix_error	tiny/csapp.c	/^void posix_error(int code, char *msg) \/* Posix-style error *\/$/;"	f
post_arg	proxy.c	/^	char post_arg[MAXLINE];$/;"	m	struct:http10request	file:
proxy_connection	proxy.c	/^	char proxy_connection[MAXLINE];$/;"	m	struct:req_hdrs	file:
read_post_params	proxy.c	/^void read_post_params(rio_t * rio, struct http10request * req)$/;"	f
read_requesthdrs	.proxy/tiny.c	/^void read_requesthdrs(rio_t *rp) $/;"	f
read_requesthdrs	proxy.c	/^void read_requesthdrs(rio_t *rp, struct req_hdrs * rh) $/;"	f
read_requesthdrs	tiny/tiny.c	/^void read_requesthdrs(rio_t *rp) $/;"	f
req_hdrs	proxy.c	/^struct req_hdrs {$/;"	s	file:
req_line	proxy.c	/^	char req_line[MAXLINE];$/;"	m	struct:http10request	file:
rio_buf	csapp.h	/^    char rio_buf[RIO_BUFSIZE]; \/* Internal buffer *\/$/;"	m	struct:__anon1
rio_buf	tiny/csapp.h	/^    char rio_buf[RIO_BUFSIZE]; \/* Internal buffer *\/$/;"	m	struct:__anon2
rio_bufptr	csapp.h	/^    char *rio_bufptr;          \/* Next unread byte in internal buf *\/$/;"	m	struct:__anon1
rio_bufptr	tiny/csapp.h	/^    char *rio_bufptr;          \/* Next unread byte in internal buf *\/$/;"	m	struct:__anon2
rio_cnt	csapp.h	/^    int rio_cnt;               \/* Unread bytes in internal buf *\/$/;"	m	struct:__anon1
rio_cnt	tiny/csapp.h	/^    int rio_cnt;               \/* Unread bytes in internal buf *\/$/;"	m	struct:__anon2
rio_fd	csapp.h	/^    int rio_fd;                \/* Descriptor for this internal buf *\/$/;"	m	struct:__anon1
rio_fd	tiny/csapp.h	/^    int rio_fd;                \/* Descriptor for this internal buf *\/$/;"	m	struct:__anon2
rio_read	.proxy/csapp.c	/^static ssize_t rio_read(rio_t *rp, char *usrbuf, size_t n)$/;"	f	file:
rio_read	csapp.c	/^static ssize_t rio_read(rio_t *rp, char *usrbuf, size_t n)$/;"	f	file:
rio_read	tiny/csapp.c	/^static ssize_t rio_read(rio_t *rp, char *usrbuf, size_t n)$/;"	f	file:
rio_readinitb	.proxy/csapp.c	/^void rio_readinitb(rio_t *rp, int fd) $/;"	f
rio_readinitb	csapp.c	/^void rio_readinitb(rio_t *rp, int fd) $/;"	f
rio_readinitb	tiny/csapp.c	/^void rio_readinitb(rio_t *rp, int fd) $/;"	f
rio_readlineb	.proxy/csapp.c	/^ssize_t rio_readlineb(rio_t *rp, void *usrbuf, size_t maxlen) $/;"	f
rio_readlineb	csapp.c	/^ssize_t rio_readlineb(rio_t *rp, void *usrbuf, size_t maxlen) $/;"	f
rio_readlineb	tiny/csapp.c	/^ssize_t rio_readlineb(rio_t *rp, void *usrbuf, size_t maxlen) $/;"	f
rio_readn	.proxy/csapp.c	/^ssize_t rio_readn(int fd, void *usrbuf, size_t n) $/;"	f
rio_readn	csapp.c	/^ssize_t rio_readn(int fd, void *usrbuf, size_t n) $/;"	f
rio_readn	tiny/csapp.c	/^ssize_t rio_readn(int fd, void *usrbuf, size_t n) $/;"	f
rio_readnb	.proxy/csapp.c	/^ssize_t rio_readnb(rio_t *rp, void *usrbuf, size_t n) $/;"	f
rio_readnb	csapp.c	/^ssize_t rio_readnb(rio_t *rp, void *usrbuf, size_t n) $/;"	f
rio_readnb	tiny/csapp.c	/^ssize_t rio_readnb(rio_t *rp, void *usrbuf, size_t n) $/;"	f
rio_t	csapp.h	/^} rio_t;$/;"	t	typeref:struct:__anon1
rio_t	tiny/csapp.h	/^} rio_t;$/;"	t	typeref:struct:__anon2
rio_writen	.proxy/csapp.c	/^ssize_t rio_writen(int fd, void *usrbuf, size_t n) $/;"	f
rio_writen	csapp.c	/^ssize_t rio_writen(int fd, void *usrbuf, size_t n) $/;"	f
rio_writen	tiny/csapp.c	/^ssize_t rio_writen(int fd, void *usrbuf, size_t n) $/;"	f
send_request	proxy.c	/^void send_request(struct http10request * r, int clientfd) $/;"	f
serve_dynamic	.proxy/tiny.c	/^void serve_dynamic(int fd, char *filename, char *cgiargs) $/;"	f
serve_dynamic	tiny/tiny.c	/^void serve_dynamic(int fd, char *filename, char *cgiargs) $/;"	f
serve_static	.proxy/tiny.c	/^void serve_static(int fd, char *filename, int filesize) $/;"	f
serve_static	tiny/tiny.c	/^void serve_static(int fd, char *filename, int filesize) $/;"	f
serversocket	nop-server.py	/^serversocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)$/;"	v
set_def_req_field	proxy.c	/^void set_def_req_field(struct http10request * r) {$/;"	f
sio_error	.proxy/csapp.c	/^void sio_error(char s[]) \/* Put error message and exit *\/$/;"	f
sio_error	csapp.c	/^void sio_error(char s[]) \/* Put error message and exit *\/$/;"	f
sio_error	tiny/csapp.c	/^void sio_error(char s[]) \/* Put error message and exit *\/$/;"	f
sio_ltoa	.proxy/csapp.c	/^static void sio_ltoa(long v, char s[], int b) $/;"	f	file:
sio_ltoa	csapp.c	/^static void sio_ltoa(long v, char s[], int b) $/;"	f	file:
sio_ltoa	tiny/csapp.c	/^static void sio_ltoa(long v, char s[], int b) $/;"	f	file:
sio_putl	.proxy/csapp.c	/^ssize_t sio_putl(long v) \/* Put long *\/$/;"	f
sio_putl	csapp.c	/^ssize_t sio_putl(long v) \/* Put long *\/$/;"	f
sio_putl	tiny/csapp.c	/^ssize_t sio_putl(long v) \/* Put long *\/$/;"	f
sio_puts	.proxy/csapp.c	/^ssize_t sio_puts(char s[]) \/* Put string *\/$/;"	f
sio_puts	csapp.c	/^ssize_t sio_puts(char s[]) \/* Put string *\/$/;"	f
sio_puts	tiny/csapp.c	/^ssize_t sio_puts(char s[]) \/* Put string *\/$/;"	f
sio_reverse	.proxy/csapp.c	/^static void sio_reverse(char s[])$/;"	f	file:
sio_reverse	csapp.c	/^static void sio_reverse(char s[])$/;"	f	file:
sio_reverse	tiny/csapp.c	/^static void sio_reverse(char s[])$/;"	f	file:
sio_strlen	.proxy/csapp.c	/^static size_t sio_strlen(char s[])$/;"	f	file:
sio_strlen	csapp.c	/^static size_t sio_strlen(char s[])$/;"	f	file:
sio_strlen	tiny/csapp.c	/^static size_t sio_strlen(char s[])$/;"	f	file:
test	proxy.c	/^void test()$/;"	f
test_parse_uri	proxy.c	/^void test_parse_uri()$/;"	f
thread_f	proxy.c	/^void * thread_f (void * x) {$/;"	f
unix_error	.proxy/csapp.c	/^void unix_error(char *msg) \/* Unix-style error *\/$/;"	f
unix_error	csapp.c	/^void unix_error(char *msg) \/* Unix-style error *\/$/;"	f
unix_error	tiny/csapp.c	/^void unix_error(char *msg) \/* Unix-style error *\/$/;"	f
user_agent	proxy.c	/^	char user_agent[MAXLINE];$/;"	m	struct:req_hdrs	file:
version	proxy.c	/^	char version[MAXLINE];$/;"	m	struct:http10request	file:
wait_for_port_use	driver.sh	/^function wait_for_port_use() {$/;"	f
